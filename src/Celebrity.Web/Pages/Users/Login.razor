@layout EmptyLayout

@page "/login"

@inject AuthService AuthService
@inject NavigationManager NavigationManager


<div class="flex items-center min-h-screen p-4 bg-@Colors.LightBackground lg:justify-center">
    <div class="flex flex-col overflow-hidden bg-@Colors.Background rounded-md shadow-lg md:flex-row md:flex-1
        lg:max-w-screen-md">
        <div class="p-4 py-6 text-@Colors.Background bg-@Colors.Primary  md:w-80 md:flex-shrink-0 md:flex md:flex-col md:items-center md:justify-evenly">
            <div class="my-3 text-4xl font-bold text-center hidden md:block uppercase text-@Colors.Background tracking-widest">
                Celebrity

            </div>
            <p class="mt-6 font-normal text-center text-@Colors.Primary100 md:mt-0">
                Welcome to the celebrities game!
                You will win if you can describe and guess more celebrities than the other team
            </p>
            <p class="flex flex-col items-center justify-center mt-10 text-center text-@Colors.Background">
                <span>Don't have an account?</span>
                <a @onclick="@GoToRegister" class="@Styles.InverseLink">Get Started!</a>
            </p>
            <p class="mt-6 text-sm text-center text-@Colors.Primary100">
                You can also <a href="setup" class="@Styles.InverseLink">play without an acount</a>
            </p>
        </div>
        <div class="p-5 md:flex-1 bg-@Colors.Background py-20">
            <h3 class="my-4 text-2xl font-semibold text-gray-900">Account Login</h3>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <div class="flex flex-col space-y-5">
                    <DataAnnotationsValidator />

                    <div class="flex flex-col space-y-1">
                        <label for="email" class="@Styles.LabelStyle">Email address</label>
                        <InputText Id="email"
                                   Class="@Styles.InputStyle"
                                   autofocus
                                   @bind-Value="loginModel.Email" />
                        <div class="@Styles.ValidationMessageStyle">
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>
                    </div>

                    <div class="flex flex-col space-y-1">
                        <div class="flex items-center justify-between">
                            <label for="password" class="@Styles.LabelStyle">Password</label>
                            <CustomLink OnClick="GoToForgotPassword">
                                Forgot Password?
                            </CustomLink>
                        </div>
                        <InputText type="password"
                                   Id="password"
                                   Class="@Styles.InputStyle"
                                   @bind-Value="loginModel.Password" />
                        <div class="@Styles.ValidationMessageStyle">
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                    </div>

                    <div class="pt-8">
                        <button type="submit"
                                class="@Styles.BigButton">
                            Log in
                        </button>
                    </div>

                    <div class="pt-6">
                        <CustomAlert Response="response" />
                    </div>
                </div>

            </EditForm>

        </div>
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();

    private Response<LoginResult> response;

    private string returnUrl;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query)
            .TryGetValue("returnUrl", out var valueFromQueryString))
        {
            returnUrl = valueFromQueryString.ToString();
        }
    }

    private void GoToRegister()
    {
        NavigationManager.NavigateTo(
            string.IsNullOrWhiteSpace(returnUrl) ?
            "register" :
            $"register?returnUrl={Uri.EscapeDataString(returnUrl)}");
    }

    private void GoToForgotPassword() => NavigationManager.NavigateTo("reset-password");

    private async Task HandleLogin()
    {
        response = await AuthService.Login(loginModel);

        if (!response.HasError)
        {
            string url = string.IsNullOrWhiteSpace(returnUrl) ? "/" : Uri.EscapeDataString(returnUrl);
            NavigationManager.NavigateTo(Uri.EscapeDataString(url));
        }
    }

}