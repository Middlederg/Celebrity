@page "/login"
@page "/login/{returnUrl}"

@inject AuthService AuthService
@inject NavigationManager NavigationManager



<div class="flex justify-center items-center h-full">
    <div class="border border-blue-200 p-10 bg-gray-100 rounded flex justify-center items-center flex-col shadow-md">
        <img src="img/logos/blue.png" class="w-16 h-16" alt="Logo">
        <h1 class="text-3xl uppercase text-@Constants.Primary font-semibold tracking-wide">Login</h1>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="px-10 flex flex-col mt-6">
                <label for="email" class="text-sm font-semibold ml-1 text-blue-800">Email address</label>
                <InputText Id="email"
                           Class="@Constants.InputStyle"
                           @bind-Value="loginModel.Email" />
                <div class="text-sm text-yellow-500 tracking-wide">
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
            </div>
            <div class="px-10 flex flex-col mt-6">
                <label for="password" class="text-sm font-semibold ml-1 text-blue-800">Password</label>

                <InputText Id="password"
                           type="password"
                           Class="@Constants.InputStyle"
                           @bind-Value="loginModel.Password" />

                <div class="text-sm text-yellow-500 tracking-wide">

                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
            </div>

            <div class="px-10 mt-6 text-lg">
                <CustomButton Type="ButtonType.Submit"
                              Style="@Constants.Button"
                              AdditionalStyles="w-full">
                    Login
                </CustomButton>
            </div>
            <div class="px-10 mt-6">
            <CustomAlert Response="response" />

            </div>
        </EditForm>
    </div>
</div>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private Response<LoginResult> response;

    [Parameter]
    public string ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        ShowErrors = false;

        response = await AuthService.Login(loginModel);

        if (!response.HasError)
        {
            string url = string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ReturnUrl; 
            NavigationManager.NavigateTo(url);
        }
    }

}