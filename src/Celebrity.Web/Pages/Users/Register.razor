@layout EmptyLayout

@page "/register"
@page "/register/{returnUrl}"

@inject AuthService AuthService
@inject NavigationManager NavigationManager


<div class="flex items-center min-h-screen p-4 bg-@Colors.LightBackground lg:justify-center">
    <div class="flex flex-col overflow-hidden bg-@Colors.Background rounded-md shadow-lg md:flex-row md:flex-1
        lg:max-w-screen-md">
        <div class="p-4 py-6 text-@Colors.Background bg-@Colors.Primary md:w-80 md:flex-shrink-0 md:flex md:flex-col md:items-center md:justify-evenly">
            <div class="my-3 text-4xl font-bold text-center hidden md:block uppercase text-@Colors.Background tracking-widest">
                Celebrity
            </div>
            <p class="mt-6 font-normal text-center text-@Colors.Primary100 md:mt-0">
                Create and edit your own concepts and categories
            </p>
            <p class="flex flex-col items-center justify-center mt-10 text-center text-@Colors.Background">
                <span>You already have an account?</span>
                <a @onclick="GoToLogin" class="@Styles.InverseLink">Login</a>
            </p>
            <p class="mt-6 text-sm text-center text-@Colors.Primary100">
                You always can <a href="setup" class="@Styles.InverseLink">play without an acount</a>
            </p>
        </div>
        <div class="p-5 md:flex-1 bg-@Colors.Background py-20">
            <h3 class="my-4 text-2xl font-semibold text-@Colors.TextDark">Create Account</h3>
            <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
                <div class="flex flex-col space-y-5">
                    <DataAnnotationsValidator />

                    <div class="flex flex-col space-y-1">
                        <label for="email" class="@Styles.LabelStyle">Email address</label>
                        <InputText type="email"
                                   Id="email"
                                   class="@Styles.InputStyle"
                                   autofocus
                                   @bind-Value="RegisterModel.Email" />
                        <div class="@Styles.ValidationMessageStyle">
                            <ValidationMessage For="@(() => RegisterModel.Email)" />
                        </div>
                    </div>

                    <div class="flex flex-col space-y-1">

                        <label for="password" class="@Styles.LabelStyle">Password</label>

                        <InputText type="password"
                                   Id="password"
                                   Class="@Styles.InputStyle"
                                   @bind-Value="RegisterModel.Password" />
                        <div class="@Styles.ValidationMessageStyle">
                            <ValidationMessage For="@(() => RegisterModel.Password)" />
                        </div>
                    </div>

                    <div class="flex flex-col space-y-1">
                        <label for="confirmPassword" class="@Styles.LabelStyle">Confirm Password</label>
                        <InputText type="password"
                                   Id="confirmPassword"
                                   Class="@Styles.InputStyle"
                                   @bind-Value="RegisterModel.ConfirmPassword" />
                        <div class="@Styles.ValidationMessageStyle">
                            <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
                        </div>
                    </div>

                    <div class="pt-8">
                        <button type="submit"
                                class="@Styles.BigButton">
                            Register
                        </button>
                    </div>

                    <div class="pt-6">
                        <CustomAlert Response="response" />
                    </div>
                </div>
            </EditForm>

        </div>
    </div>
</div>


@code {

    private RegisterModel RegisterModel = new RegisterModel();
    private Response<RegisterResult> response;

    [Parameter]
    public string ReturnUrl { get; set; }

    private void GoToLogin() => NavigationManager.NavigateTo(
        string.IsNullOrWhiteSpace(ReturnUrl) ?
        "login" :
        $"login/{ReturnUrl}");

    private async Task HandleRegistration()
    {
        var result = await AuthService.Register(RegisterModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            string url = string.IsNullOrWhiteSpace(ReturnUrl) ? "login" : $"login/{ReturnUrl}";
            NavigationManager.NavigateTo(url);
        }
    }

}