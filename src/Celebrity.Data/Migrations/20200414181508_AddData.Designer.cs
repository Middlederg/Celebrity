// <auto-generated />
using System;
using Celebrity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Celebrity.Data.Migrations
{
    [DbContext(typeof(CelebrityContext))]
    [Migration("20200414181508_AddData")]
    partial class AddData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Celebrity.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d14a1fd-dc5c-4360-9584-431b5f23f8c9"),
                            Name = "Personajes famosos"
                        },
                        new
                        {
                            Id = new Guid("ea3291d7-3bf2-4e77-ae8f-e3febdf5ed3e"),
                            Name = "Personajes de ficción famosos"
                        },
                        new
                        {
                            Id = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            Name = "Cultura"
                        },
                        new
                        {
                            Id = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            Name = "Lugares"
                        },
                        new
                        {
                            Id = new Guid("ead9ad1a-811a-446b-b6fc-b6122f1982bd"),
                            Name = "Citas"
                        },
                        new
                        {
                            Id = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            Name = "Universos de ficción"
                        },
                        new
                        {
                            Id = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            Name = "Nacionalidades"
                        },
                        new
                        {
                            Id = new Guid("1f407ee4-63ae-4a59-bed3-1eaebabf8b57"),
                            Name = "Tecnología"
                        },
                        new
                        {
                            Id = new Guid("c4f79217-b113-4163-8ee3-0d734fa5b52c"),
                            Name = "Ciencia"
                        },
                        new
                        {
                            Id = new Guid("c9d04f33-1934-4534-9958-1b9d9d4ce6c4"),
                            Name = "Deporte"
                        });
                });

            modelBuilder.Entity("Celebrity.Concepts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCustomized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Concepts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8f4758b-34dc-4c9f-b3f1-4b57219dbcf4"),
                            Difficulty = 0,
                            IsCustomized = false,
                            Name = "Alejandro Magno",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d349e200-b6f3-4271-b1fa-7aaef4dae7ee"),
                            Difficulty = 0,
                            IsCustomized = false,
                            Name = "Hércules",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("e9445dcd-10d2-4e31-b147-36fe31b423d1"),
                            Difficulty = 1,
                            IsCustomized = false,
                            Name = "Amilcar Barca",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Celebrity.Data.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Celebrity.Subcategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdCategory")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCustomized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d89fa066-1a07-4a9d-9ba9-8bf3ff2e98ee"),
                            IdCategory = new Guid("1d14a1fd-dc5c-4360-9584-431b5f23f8c9"),
                            IsCustomized = false,
                            Name = "Antigüedad"
                        },
                        new
                        {
                            Id = new Guid("0f188dc4-8b87-4581-9cd4-cd70b01a92f3"),
                            IdCategory = new Guid("1d14a1fd-dc5c-4360-9584-431b5f23f8c9"),
                            IsCustomized = false,
                            Name = "Medieval"
                        },
                        new
                        {
                            Id = new Guid("bb2afc67-efcb-4c3e-950e-e5a8a5f5a139"),
                            IdCategory = new Guid("1d14a1fd-dc5c-4360-9584-431b5f23f8c9"),
                            IsCustomized = false,
                            Name = "Moderno"
                        },
                        new
                        {
                            Id = new Guid("5b2a6026-11ad-44bc-a49c-928766e610ae"),
                            IdCategory = new Guid("1d14a1fd-dc5c-4360-9584-431b5f23f8c9"),
                            IsCustomized = false,
                            Name = "Contemporáneo"
                        },
                        new
                        {
                            Id = new Guid("0681f87c-4ea2-448b-a28a-948ad9b9e0ba"),
                            IdCategory = new Guid("ea3291d7-3bf2-4e77-ae8f-e3febdf5ed3e"),
                            IsCustomized = false,
                            Name = "Personaje de ficción"
                        },
                        new
                        {
                            Id = new Guid("4c5694b3-6b04-4094-9cab-557445a9325b"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Películas"
                        },
                        new
                        {
                            Id = new Guid("a199a564-ce38-484c-a0f8-6517b0e842d2"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Series"
                        },
                        new
                        {
                            Id = new Guid("0aca39af-d32e-48af-88cc-880d640907b1"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Literatura"
                        },
                        new
                        {
                            Id = new Guid("32b9e3e7-afb8-4e6a-9e8c-521c3b6e8215"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Teatro"
                        },
                        new
                        {
                            Id = new Guid("1750b138-7f94-41b4-95e2-aaba62e9132b"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Cómic"
                        },
                        new
                        {
                            Id = new Guid("99b82e57-7720-4035-91fc-58f115c43267"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Música"
                        },
                        new
                        {
                            Id = new Guid("9bd47488-a2d2-46bf-ba09-1687b2bdfdf2"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Videojuegos"
                        },
                        new
                        {
                            Id = new Guid("152cf8ae-5831-43c5-977b-fe0e36cc8964"),
                            IdCategory = new Guid("c9fd9bf9-d9f1-4a7e-a7c0-137a00a7b392"),
                            IsCustomized = false,
                            Name = "Juegos de mesa"
                        },
                        new
                        {
                            Id = new Guid("57dd762a-abe0-4296-9d2d-fcb1c40fab06"),
                            IdCategory = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            IsCustomized = false,
                            Name = "Paises"
                        },
                        new
                        {
                            Id = new Guid("2adbd65a-94f3-415e-b749-522960c3da4f"),
                            IdCategory = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            IsCustomized = false,
                            Name = "Ciudades"
                        },
                        new
                        {
                            Id = new Guid("b7639fbc-1d30-446c-8794-030338b88da5"),
                            IdCategory = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            IsCustomized = false,
                            Name = "Ríos"
                        },
                        new
                        {
                            Id = new Guid("ffba601c-81c8-4f91-a14f-98e68903da7b"),
                            IdCategory = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            IsCustomized = false,
                            Name = "Montañas"
                        },
                        new
                        {
                            Id = new Guid("5b854ea9-f8ce-4883-860f-c5f5dc624ac5"),
                            IdCategory = new Guid("0205c909-3a3e-4127-bf20-deb796d839b4"),
                            IsCustomized = false,
                            Name = "Mares y lagos"
                        },
                        new
                        {
                            Id = new Guid("146802de-e6af-4002-a017-1ae192e06a90"),
                            IdCategory = new Guid("ead9ad1a-811a-446b-b6fc-b6122f1982bd"),
                            IsCustomized = false,
                            Name = "Citas históricas"
                        },
                        new
                        {
                            Id = new Guid("60b6b56b-2d9f-4936-b8c0-c631c7342a9c"),
                            IdCategory = new Guid("ead9ad1a-811a-446b-b6fc-b6122f1982bd"),
                            IsCustomized = false,
                            Name = "Proverbios y refranes"
                        },
                        new
                        {
                            Id = new Guid("bf5734dd-0c5a-407b-bb87-b970a49dd2bd"),
                            IdCategory = new Guid("ead9ad1a-811a-446b-b6fc-b6122f1982bd"),
                            IsCustomized = false,
                            Name = "Frases de la tele"
                        },
                        new
                        {
                            Id = new Guid("359cf832-f93c-4787-a25e-292988925b33"),
                            IdCategory = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            IsCustomized = false,
                            Name = "Star Wars"
                        },
                        new
                        {
                            Id = new Guid("ba6ed954-3ad0-48ae-ab86-071902ff412e"),
                            IdCategory = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            IsCustomized = false,
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = new Guid("a60064fd-5160-4bda-980e-b229dba39ffa"),
                            IdCategory = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            IsCustomized = false,
                            Name = "Los Simpsons"
                        },
                        new
                        {
                            Id = new Guid("e50a300d-9906-4603-a6fe-7e3caef98731"),
                            IdCategory = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            IsCustomized = false,
                            Name = "Marvel"
                        },
                        new
                        {
                            Id = new Guid("d9b5b2d8-fb58-4ba1-b869-4725a3c36e5d"),
                            IdCategory = new Guid("95233f82-5cc6-4a01-b4e9-f874634f7452"),
                            IsCustomized = false,
                            Name = "Disney"
                        },
                        new
                        {
                            Id = new Guid("b7019227-c356-4f7f-8f9d-443913b3a4d7"),
                            IdCategory = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            IsCustomized = false,
                            Name = "España"
                        },
                        new
                        {
                            Id = new Guid("dac73aab-efb5-47c4-8115-2706ea5ced6e"),
                            IdCategory = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            IsCustomized = false,
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("f75afdff-eccc-44b3-b352-1ecd44b56dd1"),
                            IdCategory = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            IsCustomized = false,
                            Name = "Reino Unido"
                        },
                        new
                        {
                            Id = new Guid("970e4347-6765-42bf-ba01-e557ba0bfe50"),
                            IdCategory = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            IsCustomized = false,
                            Name = "Italia"
                        },
                        new
                        {
                            Id = new Guid("f47c5bbb-fe92-40f3-8b88-8e7f74f8bc5a"),
                            IdCategory = new Guid("f3dd4583-5e3b-418c-9a56-69526e4005f7"),
                            IsCustomized = false,
                            Name = "Francia"
                        });
                });

            modelBuilder.Entity("Celebrity.SubcategoriesInConcepts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConceptId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("SubcategoriesInConcepts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f942862a-9bc1-4b2e-9ef3-2ccd66c287fc"),
                            ConceptId = new Guid("d8f4758b-34dc-4c9f-b3f1-4b57219dbcf4"),
                            SubcategoryId = new Guid("d89fa066-1a07-4a9d-9ba9-8bf3ff2e98ee")
                        },
                        new
                        {
                            Id = new Guid("a32dae9e-ae17-499e-87d4-a0973efed1e2"),
                            ConceptId = new Guid("d349e200-b6f3-4271-b1fa-7aaef4dae7ee"),
                            SubcategoryId = new Guid("d89fa066-1a07-4a9d-9ba9-8bf3ff2e98ee")
                        },
                        new
                        {
                            Id = new Guid("2fa0d9b9-ca09-44ca-aabd-0e50fd7b6dfb"),
                            ConceptId = new Guid("e9445dcd-10d2-4e31-b147-36fe31b423d1"),
                            SubcategoryId = new Guid("d89fa066-1a07-4a9d-9ba9-8bf3ff2e98ee")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Celebrity.Subcategories", b =>
                {
                    b.HasOne("Celebrity.Categories", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Celebrity.SubcategoriesInConcepts", b =>
                {
                    b.HasOne("Celebrity.Concepts", "Concepts")
                        .WithMany("SubcategoriesInconcepts")
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Celebrity.Subcategories", "Subcategories")
                        .WithMany("SubcategoriesInconcepts")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Celebrity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Celebrity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Celebrity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Celebrity.Data.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
